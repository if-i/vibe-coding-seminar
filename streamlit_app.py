import streamlit as st
from io import BytesIO
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–∞–º–æ–µ –Ω–∞—á–∞–ª–æ)
st.set_page_config(page_title="Codex + AGENTS.md", layout="centered")

# SVG‚Äë–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–∞–π–¥–æ–≤
svg_data = {
    "intro": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#4B86F4" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="36" fill="#ffffff" font-family="Arial, sans-serif">
      Agent-Driven Coding
    </text>
    </svg>""",
    "what": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#FF9F1C" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="32" fill="#ffffff" font-family="Arial, sans-serif">
      –ß—Ç–æ —ç—Ç–æ / –ö–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ
    </text>
    </svg>""",
    "why": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#E5A833" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="36" fill="#ffffff" font-family="Arial, sans-serif">
      Why AGENTS.md?
    </text>
    </svg>""",
    "agents": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#65C18C" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="36" fill="#ffffff" font-family="Arial, sans-serif">
      Agents Roles
    </text>
    </svg>""",
    "workflow": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#E96A57" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="36" fill="#ffffff" font-family="Arial, sans-serif">
      Workflow
    </text>
    </svg>""",
    "prompts": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#6D5ACF" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="36" fill="#ffffff" font-family="Arial, sans-serif">
      Prompts
    </text>
    </svg>""",
    "results": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#40916C" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="36" fill="#ffffff" font-family="Arial, sans-serif">
      Results
    </text>
    </svg>""",
    "lessons": """<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">
    <rect width="800" height="200" fill="#BB3E03" rx="20" ry="20"/>
    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle"
          font-size="36" fill="#ffffff" font-family="Arial, sans-serif">
      Lessons
    </text>
    </svg>""",
}

# –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è SVG —Å alt + base64
def render_svg(svg: str, alt: str = "slide"):
    if isinstance(svg, str):
        svg_bytes = svg.encode("utf-8")
    else:
        svg_bytes = svg
    b64 = base64.b64encode(svg_bytes).decode()
    st.markdown(
        f'<img src="data:image/svg+xml;base64,{b64}" alt="{alt}" style="max-width:100%;height:auto;">',
        unsafe_allow_html=True,
    )

# –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–∞
def slide(title: str, content: str, subtitle: str | None = None) -> None:
    st.markdown(f"## {title}")
    if subtitle:
        st.markdown(f"#### {subtitle}")
    st.markdown(content)
    st.markdown("---")

# –ü–æ—Ä—è–¥–æ–∫ —Å–ª–∞–π–¥–æ–≤
slides = ["intro", "what", "why", "agents", "workflow", "prompts", "results", "lessons"]

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∏ CTA
st.sidebar.title("üéõÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ª–∞–π–¥–∞–º")
if "slide" not in st.session_state:
    st.session_state["slide"] = slides[0]

# –®–∞–±–ª–æ–Ω AGENTS.md –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
AGENTS_MD_TEMPLATE = """# AGENTS.md
## Setup
- Install deps: `pip install -r requirements.txt`
- Run: `streamlit run streamlit_app.py`

## Roles
- Architect: defines scope, stack, and constraints
- Coder: implements tasks in small verifiable steps
- Reviewer: enforces tests, linting, and security checks

## Conventions
- Small PRs with clear intent
- Tests & type hints for non-trivial logic
- Secrets never in code; use env/secret manager
"""
st.sidebar.download_button(
    "–°–∫–∞—á–∞—Ç—å AGENTS.md‚Äë—à–∞–±–ª–æ–Ω",
    AGENTS_MD_TEMPLATE,
    file_name="AGENTS.md",
    mime="text/markdown",
)
st.sidebar.markdown(
    "[–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π/—Å–ª–∞–π–¥—ã](https://github.com/if-i/vibe-coding-seminar)"
)

# –†–∞–¥–∏–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–∞–π–¥–∞
selected = st.sidebar.radio(
    "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–∞–π–¥—É:", slides, index=slides.index(st.session_state["slide"])
)

# Next/Prev
c1, _, c3 = st.columns([1, 6, 1])
i = slides.index(selected)
with c1:
    if st.button("‚Üê¬†–ù–∞–∑–∞–¥", disabled=(i == 0)):
        selected = slides[i - 1]
with c3:
    if st.button("–í–ø–µ—Ä—ë–¥¬†‚Üí", disabled=(i == len(slides) - 1)):
        selected = slides[i + 1]
st.session_state["slide"] = selected

# –ö—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (alt/—Ä–µ–∑—é–º–µ)
summaries = {
    "intro": "–í–≤–µ–¥–µ–Ω–∏–µ: Codex –∏ AGENTS.md –∫–∞–∫ –û–° –¥–ª—è –≤–∞–π–±–∫–æ–¥–∏–Ω–≥–∞.",
    "what": "–ß—Ç–æ —Ç–∞–∫–æ–µ vibe¬†coding –∏ –∫–æ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å: rapid¬†prototyping, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç—É–ª–∑—ã; –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –Ω—É–∂–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π/—Ä–µ–≤—å—é –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ–¥.",
    "why": "–ó–∞—á–µ–º AGENTS.md: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –≤–∏–±—Ä–∞—Ü–∏—é –∫–æ–¥–∞, —Ö—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç flow.",
    "agents": "–†–æ–ª–∏: Architect, Coder, Reviewer ‚Äî –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, —Ä–µ–≤—å—é.",
    "workflow": "–†–∞–±–æ—á–∏–π —Ü–∏–∫–ª: Architect —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É, Coder –ø–∏—à–µ—Ç, Reviewer –ø—Ä–æ–≤–µ—Ä—è–µ—Ç.",
    "prompts": "–ü—Ä–æ–º–ø—Ç—ã: –ø—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–æ –∏ –ø–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
    "results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∫–æ–¥–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å.",
    "lessons": "–£—Ä–æ–∫–∏: AGENTS.md –∫–∞–∫ env –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è, –≤–∞–∂–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.",
}

# –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞
key = selected
if key == "intro":
    render_svg(svg_data["intro"], alt=summaries["intro"])
    st.caption(summaries["intro"])
    slide(
        "Agent-Driven Coding",
        """
        üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é **Codex (OpenAI)** –∏ —Ñ–∞–π–ª **AGENTS.md**
        –∫–∞–∫ "–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É" –¥–ª—è –≤–∞–π–±–∫–æ–¥–∏–Ω–≥–∞.

        –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–º–ø—Ç–∏–Ω–≥ ‚Äî —ç—Ç–æ **–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø—Ä–∞–≤–∏–ª –∏ –∞–≥–µ–Ω—Ç—Å–∫–∏—Ö —Ä–æ–ª–µ–π**, 
        —á—Ç–æ–±—ã –∫–æ–¥ —Ä–æ–∂–¥–∞–ª—Å—è –≤ –ø–æ—Ç–æ–∫–µ, –Ω–æ –æ—Å—Ç–∞–≤–∞–ª—Å—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.
        """,
    )
elif key == "what":
    render_svg(svg_data["what"], alt=summaries["what"])
    st.caption(summaries["what"])
    slide(
        "–ß—Ç–æ —ç—Ç–æ / –ö–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ",
        """
        **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:
        - ‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑
        - üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ MVP
        - üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

        **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**:
        - ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–¥–µ —Ç–æ–ª—å–∫–æ —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ —Ä–µ–≤—å—é
        - üß™ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        - üõë –ù–µ –∑–∞–º–µ–Ω—è–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é, –∞ –¥–æ–ø–æ–ª–Ω—è–µ—Ç –µ—ë
        """,
    )
elif key == "why":
    render_svg(svg_data["why"], alt=summaries["why"])
    st.caption(summaries["why"])
    slide(
        "–ó–∞—á–µ–º –º–Ω–µ AGENTS.md?",
        """
        - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç "–≤–∏–±—Ä–∞—Ü–∏—é" –∫–æ–¥–∞: –∫—Ç–æ, –∫–∞–∫ –∏ –∑–∞—á–µ–º –ø–∏—à–µ—Ç.  
        - –•—Ä–∞–Ω–∏—Ç **–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è** (developer / reviewer / explainer).  
        - –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å *flow* –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏ Codex –∏–ª–∏ GPT‚Äë5.  

        üí° *–ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç = —Å–ª–æ–π –º—ã—à–ª–µ–Ω–∏—è*.  
        –≠—Ç–æ –∫–∞–∫ –µ—Å–ª–∏ –±—ã IDE –∑–Ω–∞–ª–∞ —Ç–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.

        [–ü–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç AGENTS.md](https://agents.md) ‚Äî –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ä–æ–ª–µ–π, –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ best¬†practices.
        """,
    )
elif key == "agents":
    render_svg(svg_data["agents"], alt=summaries["agents"])
    st.caption(summaries["agents"])
    slide(
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ AGENTS.md",
        """
        ```markdown
        # AGENTS.md

        ## Architect
        - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ tech decisions  
        - –≤—Å–µ–≥–¥–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Ü–µ–ª–∏ –∫–∞–∫ API‚Äë–≥—Ä–∞–Ω–∏—Ü—ã

        ## Coder
        - —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â—É—é –≤–µ—Ä—Å–∏—é  
        - –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ DX –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å

        ## Reviewer
        - –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–∏—Ñ—Ñ –ø–æ 3¬†–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º: —è—Å–Ω–æ—Å—Ç—å, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å
        ```

        üí¨ –ü—Ä–æ–º–ø—Ç—ã Codex –∏—Å–ø–æ–ª—å–∑—É—é—Ç —ç—Ç–∏ —Ä–æ–ª–∏ –∫–∞–∫ "–ø–µ—Ä—Å–æ–Ω–∞–∂–∏" –≤ –∫–æ–¥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏.
        """,
    )
elif key == "workflow":
    render_svg(svg_data["workflow"], alt=summaries["workflow"])
    st.caption(summaries["workflow"])
    slide(
        "Workflow: Codex + AGENTS.md",
        """
        1Ô∏è‚É£ –û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–æ–µ–∫—Ç ‚Üí –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è AGENTS.md  
        2Ô∏è‚É£ Codex —Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–æ–ª–∏ ‚Üí –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å workspace  
        3Ô∏è‚É£ –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è "–∞–≥–µ–Ω—Ç–Ω—ã–π —Ü–∏–∫–ª":
        - Architect —Å—Ç–∞–≤–∏—Ç —Ü–µ–ª—å
        - Coder –ø–∏—à–µ—Ç
        - Reviewer –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç  
        4Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —á–∏—Å—Ç—ã–π –∫–æ–¥ + trace reasoning –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.

        ‚öôÔ∏è –í –∏—Ç–æ–≥–µ Codex –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ –≤ autocomplete, –∞ –≤ *collaborative teammate*.
        """,
    )
elif key == "prompts":
    render_svg(svg_data["prompts"], alt=summaries["prompts"])
    st.caption(summaries["prompts"])
    slide(
        "–†–∞–±–æ—á–∏–µ –ø—Ä–æ–º–ø—Ç—ã",
        """
        ‚úÖ –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—Ç:
        - "Act as Reviewer defined in AGENTS.md, critique the diff."
        - "As Architect, refactor for scalability, not performance."
        - "Coder: implement but don‚Äôt explain unless asked."

        üö´ –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç:
        - "Just fix this" –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–æ–ª–∏.  
        - –°–ª–∏—à–∫–æ–º –æ–±—â–µ–µ "improve this code" ‚Äî Codex —Ç–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞.
        """,
    )
elif key == "results":
    render_svg(svg_data["results"], alt=summaries["results"])
    st.caption(summaries["results"])
    slide(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        """
        üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:
        - ~2√ó —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è  
        - –∫–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º –º–µ–∂–¥—É –ø—Ä–æ–µ–∫—Ç–∞–º–∏  
        - –ø—Ä–æ–º–ø—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ (modular reasoning)

        üéØ –ò—Ç–æ–≥ ‚Äî –≤–∞–π–±–∫–æ–¥–∏–Ω–≥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è **—Ä–µ–ø–ª–∏—Ü–∏—Ä—É–µ–º–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π**, –∞ –Ω–µ –º–∞–≥–∏–µ–π –ø–æ—Ç–æ–∫–∞.
        """,
    )
elif key == "lessons":
    render_svg(svg_data["lessons"], alt=summaries["lessons"])
    st.caption(summaries["lessons"])
    slide(
        "–ß—Ç–æ —è –≤—ã–Ω–µ—Å",
        """
        - AGENTS.md¬†‚Äî –∫–∞–∫ `.env` –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è: –∫–æ–Ω—Ç–µ–∫—Å—Ç + –≥—Ä–∞–Ω–∏—Ü—ã.  
        - Codex –∏ GPT‚Äë5 –º–æ–≥—É—Ç "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞–π–±", –µ—Å–ª–∏ —Ç—ã —Ñ–æ—Ä–º–∞–ª–∏–∑—É–µ—à—å —Ä–æ–ª–∏.  
        - –ö–ª—é—á –∫ –≤–∞–π–±–∫–æ–¥–∏–Ω–≥—É¬†‚Äî **—Ä–µ–¥—É—Ü–∏—Ä–æ–≤–∞—Ç—å —à—É–º –∏ —É—Å–∏–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ**.

        üß† *–í–∞–π–±–∫–æ–¥–∏–Ω–≥¬†= —Å–∏–Ω–µ—Ä–≥–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏, –∫–æ–¥–æ–º –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–æ–∑–Ω–∞–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.*
        """,
    )
